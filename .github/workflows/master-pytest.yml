name: master-pytest

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:

  pull_request:
    types:
      - labeled
    branches:
      - master

  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v3.6.2, v4.0.0
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.label.name == 'ci-run-tests' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Postgres dependency for MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install libpq
          # Determine Homebrew prefix based on architecture (Intel vs. Apple Silicon)
          # This ensures the correct path for LDFLAGS/CPPFLAGS
          HOMEBREW_PREFIX="/usr/local"
          if [[ "$(uname -m)" == "arm64" ]]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          fi
          
          echo "LDFLAGS=-L${HOMEBREW_PREFIX}/opt/libpq/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${HOMEBREW_PREFIX}/opt/libpq/include" >> $GITHUB_ENV
          echo "PATH=${HOMEBREW_PREFIX}/opt/libpq/bin:$PATH" >> $GITHUB_ENV
          
          # Verify libpq is found by pg_config (optional, for debugging)
          pg_config --version || true
      # The next few steps (Install dependencies, Lint with Flake8, Test with Pytest) will install Python dependencies,
      # run tests and lint with a variety of Python versions
      # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install -e .[dev]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        id: pytest
        run: |
          pytest -svvv && coverage report
